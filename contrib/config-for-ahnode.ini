# Appender definition json: {"appender", "stream", "file"} Can only specify a file OR a stream
log-appender = {"appender":"stderr","stream":"std_error"}
log-appender = {"appender":"p2p","file":"logs/p2p/p2p.log"}
log-appender = {"appender":"default","file":"logs/default/default.log"}

# log-console-appender = 

# log-file-appender = 

# Logger definition json: {"name", "level", "appender"}
log-logger = {"name":"default","level":"info","appender":"stderr"}
log-logger = {"name":"default","level":"info","appender":"default"}
log-logger = {"name":"p2p","level":"warn","appender":"p2p"}

# Whether to print backtrace on SIGSEGV
backtrace = yes

# Plugin(s) to enable, may be specified multiple times
plugin = webserver p2p json_rpc account_history
plugin = database_api baiyujing_api account_history_api

# The location of the rocksdb database for account history. By default it is $DATA_DIR/database/account-history-storage
account-history-path = "database/account-history-storage"

# Defines a range of accounts to track as a json pair ["from","to"] [from,to] Can be specified multiple times.
# account-history-track-account-range = 

# Defines a list of operations which will be explicitly logged.
# account-history-whitelist-ops = 

# Defines a list of operations which will be explicitly ignored.
# account-history-blacklist-ops = 

# the location of the chain state memory or database files (absolute path or relative to application data dir)
state-storage-dir = "database"

# Pairs of [BLOCK_NUM,BLOCK_ID] that should be enforced as checkpoints.
# checkpoint = 

# flush state changes to disk every N blocks
# flush-state-interval = 

# Specify which indices should be in memory during replay
# memory-replay-indices = 

# Database edits to apply on startup (may specify multiple times)
# debug-node-edit-script = 

# Database edits to apply on startup (may specify multiple times). Deprecated in favor of debug-node-edit-script.
# edit-script = 

# json-rpc log directory name.
# log-json-rpc = 

# The local IP address and port to listen for incoming connections.
p2p-endpoint = 0.0.0.0:2025

# Maxmimum number of incoming connections on P2P endpoint.
# p2p-max-connections = 

# The IP address and port of a remote peer to sync with. Deprecated in favor of p2p-seed-node.
# seed-node = 

# The IP address and port of a remote peer to sync with.
# p2p-seed-node = 

# P2P network parameters. (Default: {"listen_endpoint":"0.0.0.0:0","accept_incoming_connections":true,"wait_if_endpoint_is_busy":true,"private_key":"0000000000000000000000000000000000000000000000000000000000000000","desired_number_of_connections":20,"maximum_number_of_connections":200,"peer_connection_retry_timeout":30,"peer_inactivity_timeout":5,"peer_advertising_disabled":false,"maximum_number_of_blocks_to_handle_at_one_time":200,"maximum_number_of_sync_blocks_to_prefetch":2000,"maximum_blocks_per_peer_during_syncing":200,"active_ignored_request_timeout_microseconds":6000000} )
# p2p-parameters = 

# Enable block production, even if the chain is stale.
enable-stale-production = 0

# Percent of simings (0-99) that must be participating in order to produce blocks
# required-participation = 

# name of siming controlled by this node (e.g. initsiming )
# siming = 

# WIF PRIVATE KEY to be used by one or more simings or miners
# private-key = 

# Local http endpoint for webserver requests.
# webserver-http-endpoint = 

# Local unix http endpoint for webserver requests.
# webserver-unix-endpoint = 

# Local websocket endpoint for webserver requests.
# webserver-ws-endpoint = 

# Local http and websocket endpoint for webserver requests. Deprecated in favor of webserver-http-endpoint and webserver-ws-endpoint
# rpc-endpoint = 

# Number of threads used to handle queries. Default: 32.
webserver-thread-pool-size = 32

